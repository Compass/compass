@import "compass/support";

// Prefix any single value or value in a list that matches a value
// in $prefixable-values. If $prefixable-values is 'true', prefix all
// values.
@function prefix-value($value, $prefix, $prefixable-values) {
  // join() to allow index() on a single value.
  // Remove when https://github.com/nex3/sass/issues/668 lands in stable.
  $prefixable-values: join($prefixable-values, ());

  // List values (e.g., 'transform 2s ease-in').
  @if type-of($value) == 'list' {
  $value-list: ();
    @each $single-value in $value {
      $value-list: append($value-list, prefix-value($single-value, $prefix, $prefixable-values));
    }
    @return $value-list;
  }

  // Single values (e.g., 'border-box')
  @if index($prefixable-values, $value) or index($prefixable-values, true) {
    @return #{$prefix}#{$value};
  }
  @return $value;
}

// This mixin provides basic support for CSS3 properties and their
// corresponding experimental CSS2 properties when the implementations
// are identical except for the property prefix. Vendor arguments take a
// boolean, and vendor-value arguments take a list of values to be
// prefixed, true for all, or false.
@mixin experimental($property, $value,
  $moz            : $experimental-support-for-mozilla,
  $webkit         : $experimental-support-for-webkit,
  $ms             : $experimental-support-for-microsoft,
  $o              : $experimental-support-for-opera,
  $khtml          : $experimental-support-for-khtml,
  $moz-value      : false,
  $webkit-value   : false,
  $ms-value       : false,
  $o-value        : false,
  $khtml-value    : false,
  $official       : true
  ) {

  @if $experimental-support-for-webkit and ($webkit or $webkit-value) {
    $prefix-property: if($webkit, -webkit-#{$property}, $property);
    $prefix-value: prefix-value($value, '-webkit-', $webkit-value);

    @if $prefix-property != $property or $prefix-value != $value {
      #{$prefix-property} : #{$prefix-value};
    }
  }
  @if $experimental-support-for-khtml and ($khtml or $khtml-value) {
    $prefix-property: if($khtml, -khtml-#{$property}, $property);
    $prefix-value: prefix-value($value, '-khtml-', $khtml-value);

    @if $prefix-property != $property or $prefix-value != $value {
      #{$prefix-property} : #{$prefix-value};
    }
  }
  @if $experimental-support-for-mozilla and ($moz or $moz-value) {
    $prefix-property: if($moz, -moz-#{$property}, $property);
    $prefix-value: prefix-value($value, '-moz-', $moz-value);

    @if $prefix-property != $property or $prefix-value != $value {
      #{$prefix-property} : #{$prefix-value};
    }
  }
  @if $experimental-support-for-microsoft and ($ms or $ms-value) {
    $prefix-property: if($ms, -ms-#{$property}, $property);
    $prefix-value: prefix-value($value, '-ms-', $ms-value);

    @if $prefix-property != $property or $prefix-value != $value {
      #{$prefix-property} : #{$prefix-value};
    }
  }
  @if $experimental-support-for-opera and ($o or $o-value) {
    $prefix-property: if($o, -o-#{$property}, $property);
    $prefix-value: prefix-value($value, '-o-', $o-value);

    @if $prefix-property != $property or $prefix-value != $value {
      #{$prefix-property} : #{$prefix-value};
    }
  }
  @if $official {
    #{$property} : #{$value};
  }
}

// This mixin is a shortcut for applying only a single experimental value
@mixin experimental-only-for($property, $value,
  $moz          : false,
  $webkit       : false,
  $ms           : false,
  $o            : false,
  $khtml        : false,
  $moz-value    : false,
  $webkit-value : false,
  $ms-value     : false,
  $o-value      : false,
  $khtml-value  : false,
  $official     : false
) {
  @include experimental($property, $value, $moz, $webkit, $o, $ms, $khtml, $moz-value, $webkit-value, $ms-value, $o-value, $khtml-value, $official);
}

// Same as experimental(), but for cases when the property is the same and the value is vendorized
@mixin experimental-value($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $ms       : $experimental-support-for-microsoft,
  $o        : $experimental-support-for-opera,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @include experimental (
  $moz            : false,
  $webkit         : false,
  $ms             : false,
  $o              : false,
  $khtml          : false,
  $moz-value      : $moz,
  $webkit-value   : $webkit,
  $ms-value       : $ms,
  $o-value        : $o,
  $khtml-value    : $khtml,
  $official       : true
  );
}

// A debug tool for checking browser support
@mixin debug-support-matrix($experimental: true, $ie: true) {
  @debug  #{'$moz-'}$experimental-support-for-mozilla
          #{'$webkit-'}$experimental-support-for-webkit
          #{'$microsoft-'}$experimental-support-for-microsoft
          #{'$opera-'}$experimental-support-for-opera
          #{'$khtml-'}$experimental-support-for-khtml;
  @debug  #{'$ie6-'}$legacy-support-for-ie6
          #{'$ie7-'}$legacy-support-for-ie7
          #{'$ie8-'}$legacy-support-for-ie8;
}

// Capture the current exerimental support settings
@function capture-experimental-matrix() {
  @return $experimental-support-for-mozilla
          $experimental-support-for-webkit
          $experimental-support-for-microsoft
          $experimental-support-for-opera
          $experimental-support-for-khtml;
}

// Capture the current legacy-ie support settings
@function capture-legacy-ie-matrix() {
  @return $legacy-support-for-ie6
          $legacy-support-for-ie7
          $legacy-support-for-ie8;
}

// Capture and store support
$experimental-matrix: capture-experimental-matrix();
$legacy-ie-matrix: capture-legacy-ie-matrix();

@mixin capture-experimental-matrix {
  $experimental-matrix: capture-experimental-matrix();
}

@mixin capture-legacy-ie-matrix {
  $legacy-ie-matrix: capture-legacy-ie-matrix();
}

@mixin capture-support-matrix {
  @include capture-experimental-matrix;
  @include capture-legacy-ie-matrix;
}

// Change the experimental-support settings in specific contexts.
@mixin set-experimental-support(
  $moz    : false,
  $webkit : false,
  $ms     : false,
  $o      : false,
  $khtml  : false
) {
  $experimental-support-for-mozilla   : $moz;
  $experimental-support-for-webkit    : $webkit;
  $experimental-support-for-microsoft : $ms;
  $experimental-support-for-opera     : $o;
  $experimental-support-for-khtml     : $khtml;
}

@mixin capture-and-set-experimental(
  $moz    : false,
  $webkit : false,
  $ms     : false,
  $o      : false,
  $khtml  : false
) {
  @include capture-experimental-matrix;
  @include set-experimental-support($moz, $webkit, $ms, $o, $khtml);
}

@mixin capture-and-adjust-experimental(
  $moz    : $experimental-support-for-mozilla,
  $webkit : $experimental-support-for-webkit,
  $ms     : $experimental-support-for-microsoft,
  $o      : $experimental-support-for-opera,
  $khtml  : $experimental-support-for-khtml
) {
  @include capture-experimental-matrix;
  @include set-experimental-support($moz, $webkit, $ms, $o, $khtml);
}

// Change the legacy-support-for-ie* settings in specific contexts.
@mixin set-legacy-ie-support(
  $ie6: false,
  $ie7: false,
  $ie8: false
) {
  $legacy-support-for-ie6: $ie6;
  $legacy-support-for-ie7: $ie7;
  $legacy-support-for-ie8: $ie8;
}

@mixin capture-and-set-legacy-ie(
  $ie6: false,
  $ie7: false,
  $ie8: false
) {
  @include capture-legacy-ie-matrix;
  @include set-legacy-ie-support($ie6, $ie7, $ie8);
}

@mixin capture-and-adjust-legacy-ie(
  $ie6: $legacy-support-for-ie6,
  $ie7: $legacy-support-for-ie7,
  $ie8: $legacy-support-for-ie8
) {
  @include capture-and-set-legacy-ie($ie6, $ie7, $ie8);
}

// Capture current browser support matrix, and set a new matrix of support.
@mixin capture-and-set-support(
  $moz    : false,
  $webkit : false,
  $ms     : false,
  $o      : false,
  $khtml  : false,
  $ie6    : false,
  $ie7    : false,
  $ie8    : false
) {
  // Capture the current state
  @include capture-support-matrix;

  // Change support settings
  @include set-experimental-support($moz, $webkit, $ms, $o, $khtml);
  @include set-legacy-ie-support($ie6, $ie7, $ie8);
}

// Capture current browser support matrix, and set a new matrix of support.
@mixin capture-and-adjust-support(
  $moz        : $experimental-support-for-mozilla,
  $webkit     : $experimental-support-for-webkit,
  $ms         : $experimental-support-for-microsoft,
  $o          : $experimental-support-for-opera,
  $khtml      : $experimental-support-for-khtml,
  $ie6        : $legacy-support-for-ie6,
  $ie7        : $legacy-support-for-ie7,
  $ie8        : $legacy-support-for-ie8
) {
  @include capture-and-set-support($moz, $webkit, $ms, $o, $khtml, $ie6, $ie7, $ie8);
}


// This mixin allows you to change the experimental support settings for
// child (@content) styles.
@mixin with-only-support-for(
  $moz    : false,
  $webkit : false,
  $ms     : false,
  $o      : false,
  $khtml  : false,
  $ie6    : false,
  $ie7    : false,
  $ie8    : false
) {
  // Capture current state
  $wo-experimental-matrix : capture-experimental-matrix();
  $wo-legacy-ie-matrix    : capture-legacy-ie-matrix();

  // Set new states
  @include set-experimental-support($moz, $webkit, $ms, $o, $khtml);
  @include set-legacy-ie-support($ie6, $ie7, $ie8);

  // Apply styles
  @content;

  // Return to original support settings
  @include set-experimental-support($wo-experimental-matrix...);
  @include set-legacy-ie-support($wo-legacy-ie-matrix...);
}

// This mixin is a shortcut for making slight adjustments to browser support
// for child (@content) styles
@mixin adjust-support-for(
    $moz        : $experimental-support-for-mozilla,
    $webkit     : $experimental-support-for-webkit,
    $ms         : $experimental-support-for-microsoft,
    $o          : $experimental-support-for-opera,
    $khtml      : $experimental-support-for-khtml,
    $ie6        : $legacy-support-for-ie6,
    $ie7        : $legacy-support-for-ie7,
    $ie8        : $legacy-support-for-ie8
) {
  @include with-only-support-for($moz, $webkit, $ms, $o, $khtml, $ie6, $ie7, $ie8) {
    @content;
  }
}

// Set a default value if the given arglist is empty
@function set-arglist-default(
  $arglist,
  $default
) {
  $default: if(length($default) > 0, $default, null);
  $output: compact();
  @each $layer in $arglist {
    $output: append($output, if($layer == 'default', $default, $layer));
  }
  @return if(length($output) > 0, $output, $default);
}

// @private Returns the legacy value for a given box-model
// - Used by background-clip and -origin.
@function legacy-box($box) {
  $box: unquote($box);
  @if $box == padding-box { $box: padding; }
  @if $box == border-box { $box: border; }
  @if $box == content-box { $box: content; }
  @return $box;
}
