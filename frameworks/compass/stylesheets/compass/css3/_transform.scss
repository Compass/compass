// Transform

@import "shared";

// @private css3-feature-support variables must always include a list of five boolean values
// representing in order: -moz, -webkit, -ms, -o, -khtml
$transform-support:  not -moz, -webkit, -ms, not -o, not -khtml;
$transform-3d-support:  not -moz, -webkit, not -ms, not -o, not -khtml;

// The default x-origin for transforms
$default-origin      : 50% 50%               !default;

// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;

// Transform-origin sent as space-delimited list:
//
//     @include transform-origin( [ $origin ] )
@mixin transform-origin(
  $origin: $default-origin
) {
  $origin: compact($origin);
  $is3d: if(length($origin) > 2, true, false);
  @if $is3d {
    @include experimental(transform-origin, $origin, $transform-3d-support...);
  } @else {
    @include experimental(transform-origin, $origin, $transform-support...);
  }
}

// @doc off
// @private
// legacy wrapper for transform-origin
@mixin apply-origin(
  $origin: $default-origin
) {
  @warn "apply-origin() has been depricated in favor of the more correct transform-origin() mixin.";
  @include transform-origin($origin);
}
// @doc on

// Transform sent as a complete string:
//
//     @include transform( $transform )
//
// where '$transform` is a space separated list of all the transforms to be applied.
@mixin transform($transform) {
  @include experimental(transform, $transform, $transform-support...);
}

// @doc off
// @private
// Legacy long-cut for transform()
@mixin transform2d($transform) {
  @warn "transform2d() has been depricated in favor of the simpler transform() mixin.";
  @include transform($transform);
}
// @doc on

// Transform using the 3d support matrix
@mixin transform3d($transform) {
  @include experimental(transform, $transform, $transform-3d-support...);
}

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( $perspective )
//
// where 'perspective' is a unitless number representing the depth of the
// z-axis. The higher the perspective, the more exaggerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($perspective) {
  @include experimental(perspective, $perspective, $transform-3d-support...);
}

// Set the origin position for the perspective
//
//      @include perspective-origin( [ $origin ] )
//
// where the argument represents x/y coordinates
@mixin perspective-origin($origin: $default-origin) {
  @include experimental(perspective-origin, $origin, $transform-3d-support...);
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ $style ] )
//
// where `style` can be either `flat` or `preserve-3d`.
// Browsers default to `flat`, mixin defaults to `preserve-3d`.
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style, $transform-3d-support...);
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ $visibility ] )
//
// where `visibility` can be either `visible` or `hidden`.
// Browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility, $transform-3d-support...);
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ $scale-x, $scale-y, $perspective ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x      : $default-scale-x,
  $scale-y      : $scale-x,
  $perspective  : false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// Scale an object along the x axis
// @include scaleX( [ $scale-x, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale        : $default-scale-x,
  $perspective  : false
) {
  $trans: scaleX($scale);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// Scale an object along the y axis
// @include scaleY( [ $scale-y, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale        : $default-scale-y,
  $perspective  : false
) {
  $trans: scaleY($scale);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// Scale an object along the z axis
// @include scaleZ( [ $scale-z, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale        : $default-scale-z,
  $perspective  : false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ $scale-x, $scale-y, $scale-z, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x      : $default-scale-x,
  $scale-y      : $default-scale-y,
  $scale-z      : $default-scale-z,
  $perspective  : false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the z axis  (2D)
// @include rotate( [ $rotate, $perspective ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false
) {
  $trans: rotate($rotate);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false
) {
  @include rotate($rotate, $perspective);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ $rotate, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ $rotate, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ $vector-x, $vector-y, $vector-z, $rotate, $perspective ] )
// where the 'vector-' arguments accept unitless numbers.
// These numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz.
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x or y axis (2D)
// @include translate( [ $translate-x, $translate-y, $perspective ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units.
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// Move an object along the x axis (2D)
// @include translate( [ $translate-x, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false
) {
  $trans: translateX($trans-x);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// Move an object along the y axis (2D)
// @include translate( [ $translate-y, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false
) {
  $trans: translateY($trans-y);
  @if $perspective {
    @include transform3d(perspective($perspective) $trans);
  } @else {
    @include transform($trans);
  }
}

// Move an object along the z axis (3D)
// @include translate( [ $translate-z, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ $translate-x, $translate-y, $translate-z, $perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Skew an element:
//
//     @include skew( [ $skew-x, $skew-y ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units.
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans);
}

// Skew an element along the x axiz
//
//     @include skew( [ $skew-x ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x
) {
  $trans: skewX($skew-x);
  @include transform($trans);
}

// Skew an element along the y axis
//
//     @include skew( [ $skew-y ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y
) {
  $trans: skewY($skew-y);
  @include transform($trans);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use. They are mainly
// here for backward-compatibility purposes.
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: null,
  $scale-x:     null,
  $scale-y:     null,
  $scale-z:     null,
  $rotate-x:    null,
  $rotate-y:    null,
  $rotate-z:    null,
  $rotate3d:    null,
  $trans-x:     null,
  $trans-y:     null,
  $trans-z:     null,
  $skew-x:      null,
  $skew-y:      null,
  $origin-x:    null,
  $origin-y:    null,
  $origin-z:    null
) {
  $trans: unquote("");
  $is3d: false;

  @if $perspective or $scale-z or $rotate-x or $rotate-y or $rotate3d or $trans-z or $origin-z {
    $is3d: true;
  }

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @if $is3d {
    @include transform3d($trans);
    @include experimental(transform-origin, $origin-x $origin-y $origin-z, $transform-3d-support...);
  } @else {
    @include transform($trans);
    @include transform-origin($origin-x $origin-y $origin-z);
  }
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    null,
  $rotate:   null,
  $trans-x:  null,
  $trans-y:  null,
  $skew-x:   null,
  $skew-y:   null,
  $origin-x: null,
  $origin-y: null
) {
  @include create-transform(
    null,
    $scale, $scale, null,
    null, null, $rotate, null,
    $trans-x, $trans-y, null,
    $skew-x, $skew-y,
    $origin-x, $origin-y, null
  );
}
